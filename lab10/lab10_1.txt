Exercise 10.1
Intro to Neural Networks

Questions:

a. Would you rather use TensorFlow or Keras to build your models?
I would prefer Keras to build my models. Keras is now integrated into TensorFlow, so it would provide the advantage of being user-friendly by offering easy to use interfaces, as well as the flexibility to customize parameters by descending into TensorFlow to build models. 

b. Tasks 1 & 2: Report your best hyper-parameter settings and their resulting performance on the testing dataset.
Task 1:
dnn_regressor = train_nn_regression_model(
    learning_rate=0.01,
    steps=5000,
    batch_size=50,
    hidden_units=[10, 5],
    training_examples=training_examples,
    training_targets=training_targets,
    validation_examples=validation_examples,
    validation_targets=validation_targets)

Final RMSE: 105.10(training), 104.49 (validation)

Task 2:
test_examples = preprocess_features(california_housing_test_data)
test_targets = preprocess_targets(california_housing_test_data)

predict_testing_input_fn = lambda: my_input_fn(test_examples, 
                                               test_targets["median_house_value"], 
                                               num_epochs=1, 
                                               shuffle=False)

test_predictions = dnn_regressor.predict(input_fn=predict_testing_input_fn)
test_predictions = np.array([item['predictions'][0] for item in test_predictions])

root_mean_squared_error = math.sqrt(
    metrics.mean_squared_error(test_predictions, test_targets))

print("Final RMSE (on test data): %0.2f" % root_mean_squared_error)
Final RMSE (testing data): 103.47


